nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
nop
ret 0x5
ret 5h
kitty: nop
call kitty
jmp  kitty
jne  kitty
je   kitty
jz   kitty
call eax
call ebx 
call ecx
call edx
call esi
call edi
call esp
call ebp
jmp eax
jmp edx
jmp ebx
jmp ecx
jmp esi
jmp edi
jmp esp
jmp ebp
jne eax
jne ebx
jne ecx
jne edx
je eax
je ebx
je ecx
je edx
jz edx
jz eax
jz ebx
jz ecx
call 0x55555
jmp 0x5555555
jz 0x66666666
je 66666666h
jne 99999999h
push eax
push ebx
push ecx
push edx
push 0x56
push 0x77777777
push ax  
push dx
push cx
push bx
not eax
neg ebx
inc edx
dec ecx
pop esi
mul eax
div edx
not ax
neg bx
inc cx
dec dx
pop sp
mul ax
div dx
not ah
neg bh
inc dh
dec ch
pop al
mul bl
div dl
mov al, bl
add bh, al
sub dl, ah
and al, al
xor bh, ah
or ah, dh
cmp ah, bh
test ah, ah
mov ax, bx
add dx, sp
sub bx, cx
and ax, ax
xor ax, bx
or si, di
cmp ax, dx
test ax, ax
mov eax, ebx
add edx, ecx
sub esi, ebp
and eax, esi
xor edx, edx
or esi, edi
cmp eax, edx
test eax, eax
mov al, 0x67
add al, 0x6 
sub ah, 0x6
and ah, 0x63
xor dh, 0x5
or ch, 0x6
cmp al, 0x66 
test al, 0x0
mov ax, 0x6767
add ax, 0x7656
sub dx, 0x5
and cx, 0x77
or cx, 0x7777
cmp dx, 0x56
test ax, 56h
mov eax, 0x67676767
add eax ,0x6756
add eax, 9365h
sub ecx, 0x6
and eax, 0x666666
or eax, 7777h
or eax, 999999h
test eax, 66653h
add ah, byte ptr [0x99999]
mov al, byte ptr [eax*2+0x5] 
sub bh, byte ptr [eax+edx*4+0x7]
add ax, word ptr [eax]
add bx, word ptr [8*edx+0x66]
xor cx, word ptr [2*ecx+eax+0x5]
mov eax, [eax+eax*4+0x55]
sub ebx, [eax]
xor edx, [edx+8*edx]
mov eax, dword ptr [eax+4*eax]
test byte ptr[eax*4+eax+0x9], ah
cmp word ptr[ebx], ax
or dword ptr[eax+8*edx+0x3], eax
and [edi*8+esi], ebx
mov byte ptr [eax], bl   
add byte ptr [eax*1+ebx+0x9], al
add byte ptr [eax*2+ebx+0x9], al
add byte ptr [eax*4+ebx+0x9], al
add byte ptr [eax*8+ebx+0x9], al
add byte ptr [1*eax+ebx+0x9], al
add byte ptr [2*eax+ebx+0x9], ah
add byte ptr [4*eax+ebx+0x9], bl
add byte ptr [8*eax+ebx+0x9], bh
add word ptr [eax*1+ebx+0x9], ax
add word ptr [eax*2+ebx+0x9], bx
add word ptr [eax*4+ebx+0x9], cx
add word ptr [eax*8+ebx+0x9], dx
test word ptr [0x657777+eax], ax
cmp word ptr [edx+8*eax], cx
xor dword ptr [esi], edx
and [eax+0x55555], edi
push word ptr[eax+4*edx]
push [eax]
call [eax]
jmp [eax*4+eax]
not byte ptr [eax*4+edx+0x9]
neg word ptr [ebx]
inc dword ptr [esi+edi*1]
pop [esi+8*edi+0x333]
mul byte ptr [eax]
atoi: nop
substraction: push ebp
mov ebp, esp
mov eax, [ebp+0x9]
mov eax, [ebp+0x33]
mov eax, [ecx+eax*2]
pop ebp
ret
main: push ebp
mov ebp, esp
push ecx
mov eax, [ebp+0x33]
mov ecx, [eax+0x3]
push ecx
call atoi
add esp, 0x3
mov [ebp-0x3], eax
mov edx, [ebp-0x3]
push eax
mov eax, [ebp+0x33]
push eax
call substraction
add esp, 0x9
mov esp, ebp
pop ebp
ret
